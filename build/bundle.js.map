{"version":3,"sources":["Renderer.js"],"names":["Renderer","canvas","document","createElement","_gl","width","window","innerWidth","height","innerHeight","_instance"],"mappings":";;;;;;;;;;IAAaA,Q,WAAAA,Q;AACT,wBAAc;AAAA;;AACV,YAAIC,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAb;AACA,aAAKC,GAAL,GAAW,IAAX;AACH;;;;yCAUgB;AACb,iBAAKA,GAAL,CAASH,MAAT,CAAgBI,KAAhB,GAAwBC,OAAOC,UAA/B;AACA,iBAAKH,GAAL,CAASH,MAAT,CAAgBO,MAAhB,GAAyBF,OAAOG,WAAhC;AACH;;;4BANQ;AACL,mBAAO,KAAKL,GAAZ;AACH;;;4BARqB;AAClB,gBAAI,CAACJ,SAASU,SAAd,EAAyB;AACrBV,yBAASU,SAAT,GAAqB,IAAIV,QAAJ,EAArB;AACH;AACD,mBAAOA,SAASU,SAAhB;AACH","file":"bundle.js","sourcesContent":["export class Renderer {\n    constructor() {\n        let canvas = document.createElement(\"canvas\");\n        this._gl = null;\n    }\n    static get instance() {\n        if (!Renderer._instance) {\n            Renderer._instance = new Renderer();\n        }\n        return Renderer._instance;\n    }\n    get gl() {\n        return this._gl;\n    }\n    onCanvasResize() {\n        this._gl.canvas.width = window.innerWidth;\n        this._gl.canvas.height = window.innerHeight;\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}