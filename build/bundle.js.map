{"version":3,"sources":["Util.js"],"names":["radToDeg","degToRad","rad","Math","PI","deg"],"mappings":";;;;;QAAgBA,Q,GAAAA,Q;QAGAC,Q,GAAAA,Q;AAHT,SAASD,QAAT,CAAkBE,GAAlB,EAAuB;AAC1B,WAAOA,MAAM,GAAN,GAAYC,KAAKC,EAAxB;AACH;AACM,SAASH,QAAT,CAAkBI,GAAlB,EAAuB;AAC1B,WAAOA,MAAMF,KAAKC,EAAX,GAAgB,GAAvB;AACH","file":"bundle.js","sourcesContent":["export function radToDeg(rad) {\n    return rad * 180 / Math.PI;\n}\nexport function degToRad(deg) {\n    return deg * Math.PI / 180;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb2dyYW0uanMiXSwibmFtZXMiOlsiUHJvZ3JhbSIsIl90aGVuIiwiX2N1YmVSb3RhdGlvbiIsIl9jYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiX2dsIiwiZ2V0Q29udGV4dCIsInByZW11bHRpcGxpZWRBbHBoYSIsImFsZXJ0IiwiX3NoYWRlclByb2dyYW0iLCJTaGFkZXJQcm9ncmFtIiwiaW5pdFNoYWRlclByb2dyYW0iLCJ2c1NvdXJjZSIsImZzU291cmNlIiwiX2J1ZmZlcnMiLCJpbml0QnVmZmVycyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkNhbnZhc1Jlc2l6ZSIsImJpbmQiLCJfdGV4dHVyZSIsImxvYWRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJmcHMiLCJfZnBzSW50ZXJ2YWwiLCJEYXRlIiwibm93IiwidXBkYXRlRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfbm93IiwiX2VsYXBzZWQiLCJkcmF3U2NlbmUiLCJ1cmwiLCJnbCIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsIlJHQkEiLCJib3JkZXIiLCJzcmNGb3JtYXQiLCJzcmNUeXBlIiwiVU5TSUdORURfQllURSIsInBpeGVsIiwiVWludDhBcnJheSIsInRleEltYWdlMkQiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwiaXNQb3dlck9mMiIsImdlbmVyYXRlTWlwbWFwIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSIiwic3JjIiwidmFsdWUiLCJwb3NpdGlvbkJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiRmxvYXQzMkFycmF5IiwiU1RBVElDX0RSQVciLCJ0ZXh0dXJlQ29vcmRCdWZmZXIiLCJ0ZXh0dXJlQ29vcmRpbmF0ZXMiLCJpbmRleEJ1ZmZlciIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiaW5kaWNlcyIsIlVpbnQxNkFycmF5IiwicG9zaXRpb24iLCJkZWx0YVRpbWUiLCJzcGVlZCIsInZpZXdwb3J0IiwiY2FudmFzIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsImNsZWFyQ29sb3IiLCJlbmFibGUiLCJCTEVORCIsImNsZWFyRGVwdGgiLCJERVBUSF9URVNUIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsInNpemUiLCJ0eXBlIiwiRkxPQVQiLCJub3JtYWxpemUiLCJzdHJpZGUiLCJvZmZzZXQiLCJwb3NpdGlvbkxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJwcm9ncmFtIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwibnVtIiwidGV4dHVyZUxvY2F0aW9uIiwidXNlUHJvZ3JhbSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInNhbXBsZXIiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtMWkiLCJmaWVsZE9mVmlldyIsImFzcGVjdCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwiek5lYXIiLCJ6RmFyIiwicHJvamVjdGlvbk1hdHJpeCIsIk1hdDQiLCJwZXJzcGVjdGl2ZSIsIm1vZGVsVmlld01hdHJpeCIsInRyYW5zbGF0ZSIsInNjYWxlIiwicHJvamVjdGlvbk1hdHJpeExvY2F0aW9uIiwibW9kZWxWaWV3TWF0cml4TG9jYXRpb24iLCJ1bmlmb3JtTWF0cml4NGZ2IiwidmFsdWVzIiwicHJpbWl0aXZlVHlwZSIsIlRSSUFOR0xFUyIsImNvdW50IiwiZHJhd0VsZW1lbnRzIiwiVU5TSUdORURfU0hPUlQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBQ2FBLE8sV0FBQUEsTztBQUNULHVCQUFjO0FBQUE7O0FBQ1YsYUFBS0MsS0FBTCxHQUFhLENBQWI7QUFDQSxhQUFLQyxhQUFMLEdBQXFCLENBQXJCO0FBQ0g7Ozs7K0JBQ007QUFDSCxpQkFBS0MsT0FBTCxHQUFlQyxTQUFTQyxjQUFULENBQXdCLFFBQXhCLENBQWY7QUFDQSxpQkFBS0MsR0FBTCxHQUFXLEtBQUtILE9BQUwsQ0FBYUksVUFBYixDQUF3QixPQUF4QixFQUFpQztBQUN4Q0Msb0NBQW9CO0FBRG9CLGFBQWpDLENBQVg7QUFHQSxnQkFBSSxLQUFLRixHQUFMLElBQVksSUFBaEIsRUFBc0I7QUFDbEJHLHNCQUFNLDRCQUFOO0FBQ0E7QUFDSDtBQUNELGlCQUFLQyxjQUFMLEdBQXNCLElBQUlDLDRCQUFKLEVBQXRCO0FBQ0EsaUJBQUtELGNBQUwsQ0FBb0JFLGlCQUFwQixDQUFzQyxLQUFLTixHQUEzQyxFQUFnRE8sdUJBQWhELEVBQTBEQyx1QkFBMUQ7QUFDQSxpQkFBS0MsUUFBTCxHQUFnQixLQUFLQyxXQUFMLENBQWlCLEtBQUtWLEdBQXRCLENBQWhCO0FBQ0FXLG1CQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxLQUFLQyxjQUFMLENBQW9CQyxJQUFwQixDQUF5QixJQUF6QixDQUFsQyxFQUFrRSxLQUFsRTtBQUNBLGlCQUFLRCxjQUFMO0FBQ0EsaUJBQUtFLFFBQUwsR0FBZ0IsS0FBS0MsV0FBTCxDQUFpQix1QkFBakIsQ0FBaEI7QUFDQSxpQkFBS2hCLEdBQUwsQ0FBU2lCLFdBQVQsQ0FBcUIsS0FBS2pCLEdBQUwsQ0FBU2tCLG1CQUE5QixFQUFtRCxJQUFuRDtBQUNBLGlCQUFLbEIsR0FBTCxDQUFTaUIsV0FBVCxDQUFxQixLQUFLakIsR0FBTCxDQUFT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a0JBQVQsQ0FBNEIsS0FBSzFHLGNBQUwsQ0FBb0JpRyxPQUFoRCxFQUF5RCxvQkFBekQsQ0FBL0I7QUFDQSxnQkFBSXdCLDBCQUEwQixLQUFLN0gsR0FBTCxDQUFTOEcsa0JBQVQsQ0FBNEIsS0FBSzFHLGNBQUwsQ0FBb0JpRyxPQUFoRCxFQUF5RCxtQkFBekQsQ0FBOUI7QUFDQSxpQkFBS3JHLEdBQUwsQ0FBUzhILGdCQUFULENBQTBCRix3QkFBMUIsRUFBb0QsS0FBcEQsRUFBMkROLGlCQUFpQlMsTUFBNUU7QUFDQSxpQkFBSy9ILEdBQUwsQ0FBUzhILGdCQUFULENBQTBCRCx1QkFBMUIsRUFBbUQsS0FBbkQsRUFBMERKLGdCQUFnQk0sTUFBMUU7QUFDQSxnQkFBSUMsZ0JBQWdCLEtBQUtoSSxHQUFMLENBQVNpSSxTQUE3QjtBQUNBLGdCQUFJL0IsU0FBUyxDQUFiO0FBQ0EsZ0JBQUlnQyxRQUFRLEVBQVo7QUFDQSxpQkFBS2xJLEdBQUwsQ0FBU21JLFlBQVQsQ0FBc0JILGFBQXRCLEVBQXFDRSxLQUFyQyxFQUE0QyxLQUFLbEksR0FBTCxDQUFTb0ksY0FBckQsRUFBcUVsQyxNQUFyRTtBQUNBLGlCQUFLdEcsYUFBTCxJQUFzQmlGLEtBQXRCO0FBQ0giLCJmaWxlIjoiUHJvZ3JhbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdDQgfSBmcm9tIFwiLi9tYXRoTGliL01hdDRcIjtcbmltcG9ydCB7IGRlZ1RvUmFkIH0gZnJvbSBcIi4vbWF0aExpYi9VdGlsXCI7XG5pbXBvcnQgeyBTaGFkZXJQcm9ncmFtIH0gZnJvbSBcIi4vU2hhZGVyUHJvZ3JhbVwiO1xuaW1wb3J0IHsgZnNTb3VyY2UsIHZzU291cmNlIH0gZnJvbSBcIi4vU2hhZGVyU291cmNlc1wiO1xuZXhwb3J0IGNsYXNzIFByb2dyYW0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl90aGVuID0gMDtcbiAgICAgICAgdGhpcy5fY3ViZVJvdGF0aW9uID0gMDtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5fY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XG4gICAgICAgIHRoaXMuX2dsID0gdGhpcy5fY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCB7XG4gICAgICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGE6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5fZ2wgPT0gbnVsbCkge1xuICAgICAgICAgICAgYWxlcnQoXCJ1bmFibGUgdG8gaW5pdGlhbGlzZSB3ZWJnbFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaGFkZXJQcm9ncmFtID0gbmV3IFNoYWRlclByb2dyYW0oKTtcbiAgICAgICAgdGhpcy5fc2hhZGVyUHJvZ3JhbS5pbml0U2hhZGVyUHJvZ3JhbSh0aGlzLl9nbCwgdnNTb3VyY2UsIGZzU291cmNlKTtcbiAgICAgICAgdGhpcy5fYnVmZmVycyA9IHRoaXMuaW5pdEJ1ZmZlcnModGhpcy5fZ2wpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbkNhbnZhc1Jlc2l6ZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMub25DYW52YXNSZXNpemUoKTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHRoaXMubG9hZFRleHR1cmUoXCIuL3dvcmtpbmcvdGlsZTAwMC5wbmdcIik7XG4gICAgICAgIHRoaXMuX2dsLnBpeGVsU3RvcmVpKHRoaXMuX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuICAgICAgICB0aGlzLl9nbC5waXhlbFN0b3JlaSh0aGlzLl9nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRydWUpO1xuICAgIH1cbiAgICBvbkNhbnZhc1Jlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5fY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgfVxuICAgIHVwZGF0ZShmcHMpIHtcbiAgICAgICAgdGhpcy5fZnBzSW50ZXJ2YWwgPSAxMDAwIC8gZnBzO1xuICAgICAgICB0aGlzLl90aGVuID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy51cGRhdGVGcmFtZSgpO1xuICAgIH1cbiAgICB1cGRhdGVGcmFtZSgpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlRnJhbWUuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX25vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuX2VsYXBzZWQgPSB0aGlzLl9ub3cgLSB0aGlzLl90aGVuO1xuICAgICAgICBpZiAodGhpcy5fZWxhcHNlZCA+IHRoaXMuX2Zwc0ludGVydmFsKSB7XG4gICAgICAgICAgICB0aGlzLl90aGVuID0gdGhpcy5fbm93IC0gKHRoaXMuX2VsYXBzZWQgJSB0aGlzLl9mcHNJbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLmRyYXdTY2VuZSh0aGlzLl9mcHNJbnRlcnZhbCAvIDEwMDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICB9XG4gICAgbG9hZFRleHR1cmUodXJsKSB7XG4gICAgICAgIGxldCBnbCA9IHRoaXMuX2dsO1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSAwO1xuICAgICAgICBjb25zdCBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gMTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gMDtcbiAgICAgICAgY29uc3Qgc3JjRm9ybWF0ID0gZ2wuUkdCQTtcbiAgICAgICAgY29uc3Qgc3JjVHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG4gICAgICAgIGNvbnN0IHBpeGVsID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDI1NSwgMjU1XSk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIHNyY0Zvcm1hdCwgc3JjVHlwZSwgcGl4ZWwpO1xuICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCBzcmNGb3JtYXQsIHNyY1R5cGUsIGltYWdlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUG93ZXJPZjIoaW1hZ2Uud2lkdGgpICYmIHRoaXMuaXNQb3dlck9mMihpbWFnZS5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG4gICAgaXNQb3dlck9mMih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYgKHZhbHVlIC0gMSkpID09PSAwO1xuICAgIH1cbiAgICBpbml0QnVmZmVycyhnbCkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcG9zaXRpb25CdWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgICAtMC41LCAtMC41LCAwLjUsXG4gICAgICAgICAgICAwLjUsIC0wLjUsIDAuNSxcbiAgICAgICAgICAgIDAuNSwgMC41LCAwLjUsXG4gICAgICAgICAgICAtMC41LCAwLjUsIDAuNSxcbiAgICAgICAgICAgIC0wLjUsIC0wLjUsIC0wLjUsXG4gICAgICAgICAgICAtMC41LCAwLjUsIC0wLjUsXG4gICAgICAgICAgICAwLjUsIDAuNSwgLTAuNSxcbiAgICAgICAgICAgIDAuNSwgLTAuNSwgLTAuNSxcbiAgICAgICAgICAgIC0wLjUsIDAuNSwgLTAuNSxcbiAgICAgICAgICAgIC0wLjUsIDAuNSwgMC41LFxuICAgICAgICAgICAgMC41LCAwLjUsIDAuNSxcbiAgICAgICAgICAgIDAuNSwgMC41LCAtMC41LFxuICAgICAgICAgICAgLTAuNSwgLTAuNSwgLTAuNSxcbiAgICAgICAgICAgIDAuNSwgLTAuNSwgLTAuNSxcbiAgICAgICAgICAgIDAuNSwgLTAuNSwgMC41LFxuICAgICAgICAgICAgLTAuNSwgLTAuNSwgMC41LFxuICAgICAgICAgICAgMC41LCAtMC41LCAtMC41LFxuICAgICAgICAgICAgMC41LCAwLjUsIC0wLjUsXG4gICAgICAgICAgICAwLjUsIDAuNSwgMC41LFxuICAgICAgICAgICAgMC41LCAtMC41LCAwLjUsXG4gICAgICAgICAgICAtMC41LCAtMC41LCAtMC41LFxuICAgICAgICAgICAgLTAuNSwgLTAuNSwgMC41LFxuICAgICAgICAgICAgLTAuNSwgMC41LCAwLjUsXG4gICAgICAgICAgICAtMC41LCAwLjUsIC0wLjVcbiAgICAgICAgXSksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICAgICAgY29uc3QgdGV4dHVyZUNvb3JkQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0ZXh0dXJlQ29vcmRCdWZmZXIpO1xuICAgICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXG4gICAgICAgICAgICAwLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMC4wLFxuICAgICAgICAgICAgMS4wLCAxLjAsXG4gICAgICAgICAgICAwLjAsIDEuMCxcbiAgICAgICAgICAgIDAuMCwgMC4wLFxuICAgICAgICAgICAgMS4wLCAwLjAsXG4gICAgICAgICAgICAxLjAsIDEuMCxcbiAgICAgICAgICAgIDAuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsXG4gICAgICAgICAgICAxLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAxLjAsXG4gICAgICAgICAgICAwLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMC4wLFxuICAgICAgICAgICAgMS4wLCAxLjAsXG4gICAgICAgICAgICAwLjAsIDEuMCxcbiAgICAgICAgICAgIDAuMCwgMC4wLFxuICAgICAgICAgICAgMS4wLCAwLjAsXG4gICAgICAgICAgICAxLjAsIDEuMCxcbiAgICAgICAgICAgIDAuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsXG4gICAgICAgICAgICAxLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAxLjAsXG4gICAgICAgIF07XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRleHR1cmVDb29yZGluYXRlcyksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICAgICAgY29uc3QgaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIpO1xuICAgICAgICBjb25zdCBpbmRpY2VzID0gW1xuICAgICAgICAgICAgMCwgMSwgMiwgMCwgMiwgMyxcbiAgICAgICAgICAgIDQsIDUsIDYsIDQsIDYsIDcsXG4gICAgICAgICAgICA4LCA5LCAxMCwgOCwgMTAsIDExLFxuICAgICAgICAgICAgMTIsIDEzLCAxNCwgMTIsIDE0LCAxNSxcbiAgICAgICAgICAgIDE2LCAxNywgMTgsIDE2LCAxOCwgMTksXG4gICAgICAgICAgICAyMCwgMjEsIDIyLCAyMCwgMjIsIDIzLFxuICAgICAgICBdO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoaW5kaWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbkJ1ZmZlcixcbiAgICAgICAgICAgIHRleHR1cmU6IHRleHR1cmVDb29yZEJ1ZmZlcixcbiAgICAgICAgICAgIGluZGljZXM6IGluZGV4QnVmZmVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXdTY2VuZShkZWx0YVRpbWUpIHtcbiAgICAgICAgbGV0IHNwZWVkID0gNjAgKiBkZWx0YVRpbWU7XG4gICAgICAgIHRoaXMuX2dsLnZpZXdwb3J0KDAsIDAsIHRoaXMuX2dsLmNhbnZhcy53aWR0aCwgdGhpcy5fZ2wuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuX2dsLmJsZW5kRnVuYyh0aGlzLl9nbC5TUkNfQUxQSEEsIHRoaXMuX2dsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICB0aGlzLl9nbC5jbGVhckNvbG9yKDAsIDEsIDEsIDEpO1xuICAgICAgICB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuQkxFTkQpO1xuICAgICAgICB0aGlzLl9nbC5jbGVhckRlcHRoKDEpO1xuICAgICAgICB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgIHRoaXMuX2dsLmRlcHRoRnVuYyh0aGlzLl9nbC5MRVFVQUwpO1xuICAgICAgICB0aGlzLl9nbC5jbGVhcih0aGlzLl9nbC5DT0xPUl9CVUZGRVJfQklUIHwgdGhpcy5fZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSAzO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuX2dsLkZMT0FUO1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBzdHJpZGUgPSAwO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5fZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fc2hhZGVyUHJvZ3JhbS5wcm9ncmFtLCAnYV9wb3NpdGlvbicpO1xuICAgICAgICAgICAgdGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcnMucG9zaXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NpdGlvbkxvY2F0aW9uLCBzaXplLCB0eXBlLCBub3JtYWxpemUsIHN0cmlkZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IG51bSA9IDI7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5fZ2wuRkxPQVQ7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemUgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHN0cmlkZSA9IDA7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgbGV0IHRleHR1cmVMb2NhdGlvbiA9IHRoaXMuX2dsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlclByb2dyYW0ucHJvZ3JhbSwgJ2FfdGV4dHVyZUNvb3JkJyk7XG4gICAgICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgdGhpcy5fYnVmZmVycy50ZXh0dXJlKTtcbiAgICAgICAgICAgIHRoaXMuX2dsLnZlcnRleEF0dHJpYlBvaW50ZXIodGV4dHVyZUxvY2F0aW9uLCBudW0sIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy5fZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGV4dHVyZUxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXJzLmluZGljZXMpO1xuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9nbC51c2VQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0ucHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLl9nbC5hY3RpdmVUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkUwKTtcbiAgICAgICAgICAgIHRoaXMuX2dsLmJpbmRUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkVfMkQsIHRoaXMuX3RleHR1cmUpO1xuICAgICAgICAgICAgbGV0IHNhbXBsZXIgPSB0aGlzLl9nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyUHJvZ3JhbS5wcm9ncmFtLCAndV9zYW1wbGVyJyk7XG4gICAgICAgICAgICB0aGlzLl9nbC51bmlmb3JtMWkoc2FtcGxlciwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmllbGRPZlZpZXcgPSBkZWdUb1JhZCg0NSk7XG4gICAgICAgIGNvbnN0IGFzcGVjdCA9IHRoaXMuX2dsLmNhbnZhcy5jbGllbnRXaWR0aCAvIHRoaXMuX2dsLmNhbnZhcy5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHpOZWFyID0gMC4xO1xuICAgICAgICBjb25zdCB6RmFyID0gMTAwO1xuICAgICAgICBsZXQgcHJvamVjdGlvbk1hdHJpeCA9IE1hdDQucGVyc3BlY3RpdmUoZmllbGRPZlZpZXcsIGFzcGVjdCwgek5lYXIsIHpGYXIpO1xuICAgICAgICBsZXQgbW9kZWxWaWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgbW9kZWxWaWV3TWF0cml4LnRyYW5zbGF0ZSgwLCAwLCAtNik7XG4gICAgICAgIG1vZGVsVmlld01hdHJpeC5zY2FsZSgwLjUsIDAuNSwgMC41KTtcbiAgICAgICAgdmFyIHByb2plY3Rpb25NYXRyaXhMb2NhdGlvbiA9IHRoaXMuX2dsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLnByb2dyYW0sIFwidV9wcm9qZWN0aW9uTWF0cml4XCIpO1xuICAgICAgICB2YXIgbW9kZWxWaWV3TWF0cml4TG9jYXRpb24gPSB0aGlzLl9nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyUHJvZ3JhbS5wcm9ncmFtLCBcInVfbW9kZWxWaWV3TWF0cml4XCIpO1xuICAgICAgICB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KHByb2plY3Rpb25NYXRyaXhMb2NhdGlvbiwgZmFsc2UsIHByb2plY3Rpb25NYXRyaXgudmFsdWVzKTtcbiAgICAgICAgdGhpcy5fZ2wudW5pZm9ybU1hdHJpeDRmdihtb2RlbFZpZXdNYXRyaXhMb2NhdGlvbiwgZmFsc2UsIG1vZGVsVmlld01hdHJpeC52YWx1ZXMpO1xuICAgICAgICB2YXIgcHJpbWl0aXZlVHlwZSA9IHRoaXMuX2dsLlRSSUFOR0xFUztcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBjb3VudCA9IDM2O1xuICAgICAgICB0aGlzLl9nbC5kcmF3RWxlbWVudHMocHJpbWl0aXZlVHlwZSwgY291bnQsIHRoaXMuX2dsLlVOU0lHTkVEX1NIT1JULCBvZmZzZXQpO1xuICAgICAgICB0aGlzLl9jdWJlUm90YXRpb24gKz0gc3BlZWQ7XG4gICAgfVxufVxuIl19"}