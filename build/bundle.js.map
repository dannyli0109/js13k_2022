{"version":3,"sources":["Renderer.js"],"names":["Renderer","_canvas","document","getElementById","_gl","getContext","premultipliedAlpha","alert","width","window","innerWidth","height","innerHeight","_shaders","instance","gl","canvas","loadShader","shaderName","vertexShaderSource","fragmentShaderSource","ShaderProgram","initShaderProgram","shaders"],"mappings":";;;;;;;AAAA;;AACO,IAAIA,uCAAJ;AACP,CAAC,UAAUA,QAAV,EAAoB;AACjB,QAAIC,UAAUC,SAASC,cAAT,CAAwB,QAAxB,CAAd;AACA,QAAIC,MAAMH,QAAQI,UAAR,CAAmB,QAAnB,EAA6B;AACnCC,4BAAoB;AADe,KAA7B,CAAV;AAGA,QAAI,CAACF,GAAL,EAAU;AACNG,cAAM,4BAAN;AACH;AACDN,YAAQO,KAAR,GAAgBC,OAAOC,UAAvB;AACAT,YAAQU,MAAR,GAAiBF,OAAOG,WAAxB;AACA,QAAMC,WAAW,EAAjB;AACAb,aAASc,QAAT,GAAoB;AAChB,YAAIC,EAAJ,GAAS;AAAE,mBAAOX,GAAP;AAAa,SADR;AAEhB,YAAIY,MAAJ,GAAa;AAAE,mBAAOf,OAAP;AAAiB,SAFhB;AAGhBgB,kBAHgB,sBAGLC,UAHK,EAGOC,kBAHP,EAG2BC,oBAH3B,EAGiD;AAC7D,gBAAI,CAACP,SAASK,UAAT,CAAL,EAA2B;AACvBL,yBAASK,UAAT,IAAuB,IAAIG,4BAAJ,EAAvB;AACAR,yBAASK,UAAT,EAAqBI,iBAArB,CAAuC,KAAKP,EAA5C,EAAgDI,kBAAhD,EAAoEC,oBAApE;AACH;AACD,mBAAOP,SAASK,UAAT,CAAP;AACH,SATe;;AAUhB,YAAIK,OAAJ,GAAc;AAAE,mBAAOV,QAAP;AAAkB;AAVlB,KAApB;AAYH,CAvBD,EAuBGb,qBAxBQA,QAwBR,GAAaA,WAAW,EAAxB,CAvBH","file":"bundle.js","sourcesContent":["import { ShaderProgram } from \"../ShaderProgram\";\nexport var Renderer;\n(function (Renderer) {\n    let _canvas = document.getElementById(\"canvas\");\n    let _gl = _canvas.getContext(\"webgl2\", {\n        premultipliedAlpha: false\n    });\n    if (!_gl) {\n        alert(\"unable to initialise webgl\");\n    }\n    _canvas.width = window.innerWidth;\n    _canvas.height = window.innerHeight;\n    const _shaders = {};\n    Renderer.instance = {\n        get gl() { return _gl; },\n        get canvas() { return _canvas; },\n        loadShader(shaderName, vertexShaderSource, fragmentShaderSource) {\n            if (!_shaders[shaderName]) {\n                _shaders[shaderName] = new ShaderProgram();\n                _shaders[shaderName].initShaderProgram(this.gl, vertexShaderSource, fragmentShaderSource);\n            }\n            return _shaders[shaderName];\n        },\n        get shaders() { return _shaders; }\n    };\n})(Renderer || (Renderer = {}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb2dyYW0uanMiXSwibmFtZXMiOlsiYWxwaGFiZXRzIiwiUHJvZ3JhbSIsIl90aGVuIiwiX2N1YmVSb3RhdGlvbiIsIl9mcmFtZVRpbWVzIiwiX2ZyYW1lQ3Vyc29yIiwiX251bUZyYW1lcyIsIl9tYXhGcmFtZXMiLCJfdG90YWxGUFMiLCJfZnBzIiwiZ2wiLCJSZW5kZXJlciIsImluc3RhbmNlIiwiX3RleHRDYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiX3RleHRDb250ZXh0IiwiZ2V0Q29udGV4dCIsIl9idWZmZXJzIiwiX3NoYWRlcnMiLCJwaG9uZyIsImxvYWRTaGFkZXIiLCJ2c1Bob25nU291cmNlIiwiZnNQaG9uZ1NvdXJjZSIsInF1YWQiLCJ2c0ZyYW1lQnVmZmVyU291cmNlIiwiZnNGcmFtZUJ1ZmZlclNvdXJjZSIsIl9jdWJlTWVzaCIsIk1lc2giLCJ2ZXJ0aWNlcyIsIm5vcm1hbHMiLCJ0ZXhDb29yZHMiLCJjcmVhdGVRdWFkYnVmZmVyIiwiY2FudmFzIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJ3aWR0aCIsImhlaWdodCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkNhbnZhc1Jlc2l6ZSIsImJpbmQiLCJfdGV4dHVyZSIsImxvYWRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiRGF0ZSIsIm5vdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVwZGF0ZUZyYW1lIiwiX2VsYXBzZWQiLCJjbGVhclJlY3QiLCJmaWxsVGV4dCIsImdldEZwcyIsInRvRml4ZWQiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyIiwiZHJhd1NjZW5lIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwiX2ZyYW1lQnVmZmVyVGV4dHVyZSIsImRyYXdRdWFkIiwiTWF0aCIsIm1heCIsInVybCIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwibGV2ZWwiLCJpbnRlcm5hbEZvcm1hdCIsIlJHQkEiLCJib3JkZXIiLCJzcmNGb3JtYXQiLCJzcmNUeXBlIiwiVU5TSUdORURfQllURSIsInBpeGVsIiwiVWludDhBcnJheSIsInRleEltYWdlMkQiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwiaXNQb3dlck9mMiIsImdlbmVyYXRlTWlwbWFwIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSIiwic3JjIiwidmFsdWUiLCJxdWFkUG9zaXRpb25CdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwicXVhZFRleHR1cmVDb29yZEJ1ZmZlciIsInRleHR1cmVDb29yZGluYXRlcyIsInVzZVByb2dyYW0iLCJwcm9ncmFtIiwidmlld3BvcnQiLCJjbGVhckNvbG9yIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwicG9zaXRpb25Mb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ0ZXh0dXJlTG9jYXRpb24iLCJudW0iLCJ0eXBlIiwibm9ybWFsaXplIiwic3RyaWRlIiwib2Zmc2V0Iiwic2FtcGxlciIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInVuaWZvcm0xaSIsImRyYXdBcnJheXMiLCJUUklBTkdMRVMiLCJkZWxldGVGcmFtZWJ1ZmZlciIsImRlbGV0ZVRleHR1cmUiLCJURVhUVVJFX01BR19GSUxURVIiLCJhdHRhY2htZW50UG9pbnQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiZGVwdGhCdWZmZXIiLCJjcmVhdGVSZW5kZXJidWZmZXIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJERVBUSF9BVFRBQ0hNRU5UIiwiZGVsdGFUaW1lIiwic3BlZWQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiZW5hYmxlIiwiQkxFTkQiLCJjbGVhckRlcHRoIiwiREVQVEhfVEVTVCIsImRlcHRoRnVuYyIsIkxFUVVBTCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJmaWVsZE9mVmlldyIsImFzcGVjdCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwiek5lYXIiLCJ6RmFyIiwicHJvamVjdGlvbk1hdHJpeCIsIk1hdDQiLCJwZXJzcGVjdGl2ZSIsIm1vZGVsVmlld01hdHJpeCIsInRyYW5zbGF0ZSIsInNjYWxlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwicHJvamVjdGlvbk1hdHJpeExvY2F0aW9uIiwibW9kZWxWaWV3TWF0cml4TG9jYXRpb24iLCJ1bmlmb3JtTWF0cml4NGZ2IiwidmFsdWVzIiwicHJpbWl0aXZlVHlwZSIsImNvdW50IiwiZHJhd0VsZW1lbnRzIiwiVU5TSUdORURfU0hPUlQiLCJ1bmJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0EsSUFBTUEsWUFBWSxDQUNkLEdBRGMsRUFDVCxHQURTLEVBQ0osR0FESSxFQUNDLEdBREQsRUFDTSxHQUROLEVBQ1csR0FEWCxFQUNnQixHQURoQixFQUNxQixHQURyQixFQUMwQixHQUQxQixFQUMrQixHQUQvQixFQUNvQyxHQURwQyxFQUN5QyxHQUR6QyxFQUM4QyxHQUQ5QyxFQUNtRCxHQURuRCxFQUN3RCxHQUR4RCxFQUM2RCxHQUQ3RCxFQUNr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RUFBcURULGlCQUFpQlksTUFBdEU7QUFDQWhLLGVBQUcrSixnQkFBSCxDQUFvQkQsdUJBQXBCLEVBQTZDLEtBQTdDLEVBQW9EUCxnQkFBZ0JTLE1BQXBFO0FBQ0EsaUJBQUt2SyxhQUFMLElBQXNCd0ksS0FBdEI7QUFDSCIsImZpbGUiOiJQcm9ncmFtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF0NCB9IGZyb20gXCIuL21hdGhMaWIvTWF0NFwiO1xuaW1wb3J0IHsgZGVnVG9SYWQgfSBmcm9tIFwiLi9tYXRoTGliL1V0aWxcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi9yZW5kZXJlci9NZXNoXCI7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlcmVyL1JlbmRlcmVyXCI7XG5pbXBvcnQgeyB2c1Bob25nU291cmNlLCBmc1Bob25nU291cmNlLCB2c0ZyYW1lQnVmZmVyU291cmNlLCBmc0ZyYW1lQnVmZmVyU291cmNlIH0gZnJvbSBcIi4vU2hhZGVyU291cmNlc1wiO1xuY29uc3QgYWxwaGFiZXRzID0gW1xuICAgIFwiYVwiLCBcImJcIiwgXCJjXCIsIFwiZFwiLCBcImVcIiwgXCJmXCIsIFwiZ1wiLCBcImhcIiwgXCJpXCIsIFwialwiLCBcImtcIiwgXCJsXCIsIFwibVwiLCBcIm5cIiwgXCJvXCIsIFwicFwiLCBcInFcIiwgXCJyXCIsIFwic1wiLCBcInRcIiwgXCJ1XCIsIFwidlwiLCBcIndcIiwgXCJ4XCIsIFwieVwiLCBcInpcIlxuXTtcbmV4cG9ydCBjbGFzcyBQcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fdGhlbiA9IDA7XG4gICAgICAgIHRoaXMuX2N1YmVSb3RhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX2ZyYW1lVGltZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fZnJhbWVDdXJzb3IgPSAwO1xuICAgICAgICB0aGlzLl9udW1GcmFtZXMgPSAwO1xuICAgICAgICB0aGlzLl9tYXhGcmFtZXMgPSA2MDtcbiAgICAgICAgdGhpcy5fdG90YWxGUFMgPSAwO1xuICAgICAgICB0aGlzLl9mcHMgPSAwO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICBsZXQgZ2wgPSBSZW5kZXJlci5pbnN0YW5jZS5nbDtcbiAgICAgICAgdGhpcy5fdGV4dENhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dENhbnZhc1wiKTtcbiAgICAgICAgdGhpcy5fdGV4dENvbnRleHQgPSB0aGlzLl90ZXh0Q2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5fYnVmZmVycyA9IHt9O1xuICAgICAgICB0aGlzLl9zaGFkZXJzID0ge307XG4gICAgICAgIHRoaXMuX3NoYWRlcnMucGhvbmcgPSBSZW5kZXJlci5pbnN0YW5jZS5sb2FkU2hhZGVyKFwicGhvbmdcIiwgdnNQaG9uZ1NvdXJjZSwgZnNQaG9uZ1NvdXJjZSk7XG4gICAgICAgIHRoaXMuX3NoYWRlcnMucXVhZCA9IFJlbmRlcmVyLmluc3RhbmNlLmxvYWRTaGFkZXIoXCJxdWFkXCIsIHZzRnJhbWVCdWZmZXJTb3VyY2UsIGZzRnJhbWVCdWZmZXJTb3VyY2UpO1xuICAgICAgICB0aGlzLl9jdWJlTWVzaCA9IG5ldyBNZXNoKFtcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAtMC41LCAwLjUsIDFdLCBub3JtYWxzOiBbMCwgMCwgMV0sIHRleENvb3JkczogWzAsIDBdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbMC41LCAtMC41LCAwLjUsIDFdLCBub3JtYWxzOiBbMCwgMCwgMV0sIHRleENvb3JkczogWzEsIDBdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbMC41LCAwLjUsIDAuNSwgMV0sIG5vcm1hbHM6IFswLCAwLCAxXSwgdGV4Q29vcmRzOiBbMSwgMV0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAwLjUsIDAuNSwgMV0sIG5vcm1hbHM6IFswLCAwLCAxXSwgdGV4Q29vcmRzOiBbMCwgMV0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAtMC41LCAtMC41LCAxXSwgbm9ybWFsczogWzAsIDAsIC0xXSwgdGV4Q29vcmRzOiBbMCwgMF0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAwLjUsIC0wLjUsIDFdLCBub3JtYWxzOiBbMCwgMCwgLTFdLCB0ZXhDb29yZHM6IFsxLCAwXSB9LFxuICAgICAgICAgICAgeyB2ZXJ0aWNlczogWzAuNSwgMC41LCAtMC41LCAxXSwgbm9ybWFsczogWzAsIDAsIC0xXSwgdGV4Q29vcmRzOiBbMSwgMV0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFswLjUsIC0wLjUsIC0wLjUsIDFdLCBub3JtYWxzOiBbMCwgMCwgLTFdLCB0ZXhDb29yZHM6IFswLCAxXSB9LFxuICAgICAgICAgICAgeyB2ZXJ0aWNlczogWy0wLjUsIDAuNSwgLTAuNSwgMV0sIG5vcm1hbHM6IFswLCAtMSwgMF0sIHRleENvb3JkczogWzAsIDBdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbMC41LCAwLjUsIDAuNSwgMV0sIG5vcm1hbHM6IFswLCAtMSwgMF0sIHRleENvb3JkczogWzEsIDBdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbMC41LCAwLjUsIDAuNSwgMV0sIG5vcm1hbHM6IFswLCAtMSwgMF0sIHRleENvb3JkczogWzEsIDFdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbLTAuNSwgMC41LCAtMC41LCAxXSwgbm9ybWFsczogWzAsIC0xLCAwXSwgdGV4Q29vcmRzOiBbMCwgMV0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAtMC41LCAtMC41LCAxXSwgbm9ybWFsczogWzAsIDEsIDBdLCB0ZXhDb29yZHM6IFswLCAwXSB9LFxuICAgICAgICAgICAgeyB2ZXJ0aWNlczogWzAuNSwgLTAuNSwgLTAuNSwgMV0sIG5vcm1hbHM6IFswLCAxLCAwXSwgdGV4Q29vcmRzOiBbMSwgMF0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFswLjUsIC0wLjUsIDAuNSwgMV0sIG5vcm1hbHM6IFswLCAxLCAwXSwgdGV4Q29vcmRzOiBbMSwgMV0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAtMC41LCAwLjUsIDFdLCBub3JtYWxzOiBbMCwgMSwgMF0sIHRleENvb3JkczogWzAsIDFdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbMC41LCAtMC41LCAtMC41LCAxXSwgbm9ybWFsczogWzEsIDAsIDBdLCB0ZXhDb29yZHM6IFswLCAwXSB9LFxuICAgICAgICAgICAgeyB2ZXJ0aWNlczogWzAuNSwgMC41LCAtMC41LCAxXSwgbm9ybWFsczogWzEsIDAsIDBdLCB0ZXhDb29yZHM6IFsxLCAwXSB9LFxuICAgICAgICAgICAgeyB2ZXJ0aWNlczogWzAuNSwgMC41LCAwLjUsIDFdLCBub3JtYWxzOiBbMSwgMCwgMF0sIHRleENvb3JkczogWzEsIDFdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbMC41LCAtMC41LCAwLjUsIDFdLCBub3JtYWxzOiBbMSwgMCwgMF0sIHRleENvb3JkczogWzAsIDFdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbLTAuNSwgLTAuNSwgLTAuNSwgMV0sIG5vcm1hbHM6IFstMSwgMCwgMF0sIHRleENvb3JkczogWzAsIDBdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbLTAuNSwgLTAuNSwgMC41LCAxXSwgbm9ybWFsczogWy0xLCAwLCAwXSwgdGV4Q29vcmRzOiBbMSwgMF0gfSxcbiAgICAgICAgICAgIHsgdmVydGljZXM6IFstMC41LCAwLjUsIDAuNSwgMV0sIG5vcm1hbHM6IFstMSwgMCwgMF0sIHRleENvb3JkczogWzEsIDFdIH0sXG4gICAgICAgICAgICB7IHZlcnRpY2VzOiBbLTAuNSwgMC41LCAtMC41LCAxXSwgbm9ybWFsczogWy0xLCAwLCAwXSwgdGV4Q29vcmRzOiBbMCwgMV0gfVxuICAgICAgICBdLCBbXG4gICAgICAgICAgICAwLCAxLCAyLCAwLCAyLCAzLFxuICAgICAgICAgICAgNCwgNSwgNiwgNCwgNiwgNyxcbiAgICAgICAgICAgIDgsIDksIDEwLCA4LCAxMCwgMTEsXG4gICAgICAgICAgICAxMiwgMTMsIDE0LCAxMiwgMTQsIDE1LFxuICAgICAgICAgICAgMTYsIDE3LCAxOCwgMTYsIDE4LCAxOSxcbiAgICAgICAgICAgIDIwLCAyMSwgMjIsIDIwLCAyMiwgMjNcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuY3JlYXRlUXVhZGJ1ZmZlcigpO1xuICAgICAgICBsZXQgY2FudmFzID0gUmVuZGVyZXIuaW5zdGFuY2UuY2FudmFzO1xuICAgICAgICB0aGlzLmNyZWF0ZUZyYW1lYnVmZmVyKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uQ2FudmFzUmVzaXplLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5vbkNhbnZhc1Jlc2l6ZSgpO1xuICAgICAgICB0aGlzLl90ZXh0dXJlID0gdGhpcy5sb2FkVGV4dHVyZShcIi4vd29ya2luZy90aWxlMDAwLnBuZ1wiKTtcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdHJ1ZSk7XG4gICAgfVxuICAgIG9uQ2FudmFzUmVzaXplKCkge1xuICAgICAgICBsZXQgZ2wgPSBSZW5kZXJlci5pbnN0YW5jZS5nbDtcbiAgICAgICAgbGV0IGNhbnZhcyA9IFJlbmRlcmVyLmluc3RhbmNlLmNhbnZhcztcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIHRoaXMuY3JlYXRlRnJhbWVidWZmZXIoZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLl90aGVuID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlRnJhbWUuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHVwZGF0ZUZyYW1lKG5vdykge1xuICAgICAgICBsZXQgZ2wgPSBSZW5kZXJlci5pbnN0YW5jZS5nbDtcbiAgICAgICAgdGhpcy5fZWxhcHNlZCA9IG5vdyAtIHRoaXMuX3RoZW47XG4gICAgICAgIGlmICh0aGlzLl9lbGFwc2VkID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2ZwcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9mcHMgPSAxMDAwIC8gdGhpcy5fZWxhcHNlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aGVuID0gbm93O1xuICAgICAgICB0aGlzLl90ZXh0Q29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fdGV4dENhbnZhcy53aWR0aCwgdGhpcy5fdGV4dENhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLl90ZXh0Q29udGV4dC5maWxsVGV4dChcIkZQUzogXCIgKyB0aGlzLmdldEZwcygpLnRvRml4ZWQoMSksIDEwLCAxMCk7XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fYnVmZmVycy5mcmFtZWJ1ZmZlcik7XG4gICAgICAgIHRoaXMuZHJhd1NjZW5lKHRoaXMuX2VsYXBzZWQgLyAxMDAwKTtcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZnJhbWVCdWZmZXJUZXh0dXJlKTtcbiAgICAgICAgdGhpcy5kcmF3UXVhZCgpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVGcmFtZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgZ2V0RnBzKCkge1xuICAgICAgICB0aGlzLl90b3RhbEZQUyArPSB0aGlzLl9mcHMgLSAodGhpcy5fZnJhbWVUaW1lc1t0aGlzLl9mcmFtZUN1cnNvcl0gfHwgMCk7XG4gICAgICAgIHRoaXMuX2ZyYW1lVGltZXNbdGhpcy5fZnJhbWVDdXJzb3IrK10gPSB0aGlzLl9mcHM7XG4gICAgICAgIHRoaXMuX251bUZyYW1lcyA9IE1hdGgubWF4KHRoaXMuX251bUZyYW1lcywgdGhpcy5fZnJhbWVDdXJzb3IpO1xuICAgICAgICB0aGlzLl9mcmFtZUN1cnNvciAlPSB0aGlzLl9tYXhGcmFtZXM7XG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbEZQUyAvIHRoaXMuX251bUZyYW1lcztcbiAgICB9XG4gICAgZW5kKCkge1xuICAgIH1cbiAgICBsb2FkVGV4dHVyZSh1cmwpIHtcbiAgICAgICAgbGV0IGdsID0gUmVuZGVyZXIuaW5zdGFuY2UuZ2w7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICBjb25zdCBsZXZlbCA9IDA7XG4gICAgICAgIGNvbnN0IGludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSAxO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSAxO1xuICAgICAgICBjb25zdCBib3JkZXIgPSAwO1xuICAgICAgICBjb25zdCBzcmNGb3JtYXQgPSBnbC5SR0JBO1xuICAgICAgICBjb25zdCBzcmNUeXBlID0gZ2wuVU5TSUdORURfQllURTtcbiAgICAgICAgY29uc3QgcGl4ZWwgPSBuZXcgVWludDhBcnJheShbMCwgMCwgMjU1LCAyNTVdKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgc3JjRm9ybWF0LCBzcmNUeXBlLCBwaXhlbCk7XG4gICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIHNyY0Zvcm1hdCwgc3JjVHlwZSwgaW1hZ2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNQb3dlck9mMihpbWFnZS53aWR0aCkgJiYgdGhpcy5pc1Bvd2VyT2YyKGltYWdlLmhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpbWFnZS5zcmMgPSB1cmw7XG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH1cbiAgICBpc1Bvd2VyT2YyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT09IDA7XG4gICAgfVxuICAgIGNyZWF0ZVF1YWRidWZmZXIoKSB7XG4gICAgICAgIGxldCBnbCA9IFJlbmRlcmVyLmluc3RhbmNlLmdsO1xuICAgICAgICBsZXQgcXVhZFBvc2l0aW9uQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBxdWFkUG9zaXRpb25CdWZmZXIpO1xuICAgICAgICBsZXQgdmVydGljZXMgPSBbXG4gICAgICAgICAgICAtMSwgLTEsIDAsXG4gICAgICAgICAgICAxLCAtMSwgMCxcbiAgICAgICAgICAgIDEsIDEsIDAsXG4gICAgICAgICAgICAtMSwgLTEsIDAsXG4gICAgICAgICAgICAxLCAxLCAwLFxuICAgICAgICAgICAgLTEsIDEsIDBcbiAgICAgICAgXTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7XG4gICAgICAgIHRoaXMuX2J1ZmZlcnMucXVhZFBvc2l0aW9uQnVmZmVyID0gcXVhZFBvc2l0aW9uQnVmZmVyO1xuICAgICAgICBsZXQgcXVhZFRleHR1cmVDb29yZEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcXVhZFRleHR1cmVDb29yZEJ1ZmZlcik7XG4gICAgICAgIGxldCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXG4gICAgICAgICAgICAwLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMC4wLFxuICAgICAgICAgICAgMS4wLCAxLjAsXG4gICAgICAgICAgICAwLjAsIDAuMCxcbiAgICAgICAgICAgIDEuMCwgMS4wLFxuICAgICAgICAgICAgMC4wLCAxLjBcbiAgICAgICAgXTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGV4dHVyZUNvb3JkaW5hdGVzKSwgZ2wuU1RBVElDX0RSQVcpO1xuICAgICAgICB0aGlzLl9idWZmZXJzLnF1YWRUZXh0dXJlQ29vcmRCdWZmZXIgPSBxdWFkVGV4dHVyZUNvb3JkQnVmZmVyO1xuICAgIH1cbiAgICBkcmF3UXVhZCgpIHtcbiAgICAgICAgbGV0IGdsID0gUmVuZGVyZXIuaW5zdGFuY2UuZ2w7XG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5fc2hhZGVycy5xdWFkLnByb2dyYW0pO1xuICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBnbC5jbGVhckNvbG9yKDEsIDAsIDAsIDEpO1xuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICAgICAgbGV0IHBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJzLnF1YWQucHJvZ3JhbSwgJ2FfcG9zaXRpb24nKTtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcnMucXVhZFBvc2l0aW9uQnVmZmVyKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NpdGlvbkxvY2F0aW9uLCAzLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwb3NpdGlvbkxvY2F0aW9uKTtcbiAgICAgICAgbGV0IHRleHR1cmVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlcnMucXVhZC5wcm9ncmFtLCAnYV90ZXh0dXJlQ29vcmQnKTtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcnMucXVhZFRleHR1cmVDb29yZEJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IG51bSA9IDI7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBnbC5GTE9BVDtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IDA7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDA7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGV4dHVyZUxvY2F0aW9uLCBudW0sIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0ZXh0dXJlTG9jYXRpb24pO1xuICAgICAgICBsZXQgc2FtcGxlciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJzLnF1YWQucHJvZ3JhbSwgJ3Vfc2FtcGxlcicpO1xuICAgICAgICBnbC51bmlmb3JtMWkoc2FtcGxlciwgMCk7XG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCA2KTtcbiAgICB9XG4gICAgZGVsZXRlRnJhbWVidWZmZXIoKSB7XG4gICAgICAgIGxldCBnbCA9IFJlbmRlcmVyLmluc3RhbmNlLmdsO1xuICAgICAgICBpZiAodGhpcy5fYnVmZmVycy5mcmFtZWJ1ZmZlcilcbiAgICAgICAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRoaXMuX2J1ZmZlcnMuZnJhbWVidWZmZXIpO1xuICAgICAgICBpZiAodGhpcy5fZnJhbWVCdWZmZXJUZXh0dXJlKVxuICAgICAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl9mcmFtZUJ1ZmZlclRleHR1cmUpO1xuICAgICAgICB0aGlzLl9idWZmZXJzLmZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZnJhbWVCdWZmZXJUZXh0dXJlID0gbnVsbDtcbiAgICB9XG4gICAgY3JlYXRlRnJhbWVidWZmZXIod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBsZXQgZ2wgPSBSZW5kZXJlci5pbnN0YW5jZS5nbDtcbiAgICAgICAgdGhpcy5kZWxldGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgICB0aGlzLl9mcmFtZUJ1ZmZlclRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuX2ZyYW1lQnVmZmVyVGV4dHVyZSk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICB0aGlzLl9idWZmZXJzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLl9idWZmZXJzLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgY29uc3QgYXR0YWNobWVudFBvaW50ID0gZ2wuQ09MT1JfQVRUQUNITUVOVDA7XG4gICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBhdHRhY2htZW50UG9pbnQsIGdsLlRFWFRVUkVfMkQsIHRoaXMuX2ZyYW1lQnVmZmVyVGV4dHVyZSwgMCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlcnMuZGVwdGhCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHRoaXMuX2J1ZmZlcnMuZGVwdGhCdWZmZXIpO1xuICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfQ09NUE9ORU5UMTYsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCB0aGlzLl9idWZmZXJzLmRlcHRoQnVmZmVyKTtcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICB9XG4gICAgZHJhd1NjZW5lKGRlbHRhVGltZSkge1xuICAgICAgICBsZXQgZ2wgPSBSZW5kZXJlci5pbnN0YW5jZS5nbDtcbiAgICAgICAgbGV0IHNwZWVkID0gNjAgKiBkZWx0YVRpbWU7XG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICBnbC5jbGVhckNvbG9yKDAsIDEsIDEsIDEpO1xuICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgICBnbC5jbGVhckRlcHRoKDEpO1xuICAgICAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgIGdsLmRlcHRoRnVuYyhnbC5MRVFVQUwpO1xuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5fc2hhZGVycy5waG9uZy5wcm9ncmFtKTtcbiAgICAgICAgdGhpcy5fY3ViZU1lc2guYmluZCgpO1xuICAgICAgICB7XG4gICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMuX3RleHR1cmUpO1xuICAgICAgICAgICAgbGV0IHNhbXBsZXIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVycy5waG9uZy5wcm9ncmFtLCAndV9zYW1wbGVyJyk7XG4gICAgICAgICAgICBnbC51bmlmb3JtMWkoc2FtcGxlciwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmllbGRPZlZpZXcgPSBkZWdUb1JhZCg0NSk7XG4gICAgICAgIGNvbnN0IGFzcGVjdCA9IGdsLmNhbnZhcy5jbGllbnRXaWR0aCAvIGdsLmNhbnZhcy5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHpOZWFyID0gMC4xO1xuICAgICAgICBjb25zdCB6RmFyID0gMTAwO1xuICAgICAgICBsZXQgcHJvamVjdGlvbk1hdHJpeCA9IE1hdDQucGVyc3BlY3RpdmUoZmllbGRPZlZpZXcsIGFzcGVjdCwgek5lYXIsIHpGYXIpO1xuICAgICAgICBsZXQgbW9kZWxWaWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgbW9kZWxWaWV3TWF0cml4LnRyYW5zbGF0ZSgwLCAwLCAtNik7XG4gICAgICAgIG1vZGVsVmlld01hdHJpeC5zY2FsZSgwLjUsIDAuNSwgMC41KTtcbiAgICAgICAgbW9kZWxWaWV3TWF0cml4LnJvdGF0ZVgoZGVnVG9SYWQodGhpcy5fY3ViZVJvdGF0aW9uKSk7XG4gICAgICAgIG1vZGVsVmlld01hdHJpeC5yb3RhdGVZKGRlZ1RvUmFkKHRoaXMuX2N1YmVSb3RhdGlvbikpO1xuICAgICAgICBtb2RlbFZpZXdNYXRyaXgucm90YXRlWihkZWdUb1JhZCh0aGlzLl9jdWJlUm90YXRpb24pKTtcbiAgICAgICAgdmFyIHByb2plY3Rpb25NYXRyaXhMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJzLnBob25nLnByb2dyYW0sIFwidV9wcm9qZWN0aW9uTWF0cml4XCIpO1xuICAgICAgICB2YXIgbW9kZWxWaWV3TWF0cml4TG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVycy5waG9uZy5wcm9ncmFtLCBcInVfbW9kZWxWaWV3TWF0cml4XCIpO1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHByb2plY3Rpb25NYXRyaXhMb2NhdGlvbiwgZmFsc2UsIHByb2plY3Rpb25NYXRyaXgudmFsdWVzKTtcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihtb2RlbFZpZXdNYXRyaXhMb2NhdGlvbiwgZmFsc2UsIG1vZGVsVmlld01hdHJpeC52YWx1ZXMpO1xuICAgICAgICB2YXIgcHJpbWl0aXZlVHlwZSA9IGdsLlRSSUFOR0xFUztcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBjb3VudCA9IDM2O1xuICAgICAgICBnbC5kcmF3RWxlbWVudHMocHJpbWl0aXZlVHlwZSwgY291bnQsIGdsLlVOU0lHTkVEX1NIT1JULCBvZmZzZXQpO1xuICAgICAgICB0aGlzLl9jdWJlTWVzaC51bmJpbmQoKTtcbiAgICAgICAgbW9kZWxWaWV3TWF0cml4LnRyYW5zbGF0ZSgxLCAwLCAwKTtcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihwcm9qZWN0aW9uTWF0cml4TG9jYXRpb24sIGZhbHNlLCBwcm9qZWN0aW9uTWF0cml4LnZhbHVlcyk7XG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobW9kZWxWaWV3TWF0cml4TG9jYXRpb24sIGZhbHNlLCBtb2RlbFZpZXdNYXRyaXgudmFsdWVzKTtcbiAgICAgICAgdGhpcy5fY3ViZVJvdGF0aW9uICs9IHNwZWVkO1xuICAgIH1cbn1cbiJdfQ=="}