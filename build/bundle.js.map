{"version":3,"sources":["Renderer.js"],"names":["Renderer","_canvas","document","getElementById","_gl","getContext","premultipliedAlpha","width","window","innerWidth","height","innerHeight","alert","instance","gl","canvas"],"mappings":";;;;;AAAO,IAAIA,uCAAJ;AACP,CAAC,UAAUA,QAAV,EAAoB;AACjB,QAAIC,UAAUC,SAASC,cAAT,CAAwB,QAAxB,CAAd;AACA,QAAIC,MAAMH,QAAQI,UAAR,CAAmB,QAAnB,EAA6B;AACnCC,4BAAoB;AADe,KAA7B,CAAV;AAGAL,YAAQM,KAAR,GAAgBC,OAAOC,UAAvB;AACAR,YAAQS,MAAR,GAAiBF,OAAOG,WAAxB;AACA,QAAI,CAACP,GAAL,EAAU;AACNQ,cAAM,4BAAN;AACH;AACDZ,aAASa,QAAT,GAAoB;AAChB,YAAIC,EAAJ,GAAS;AAAE,mBAAOV,GAAP;AAAa,SADR;AAEhB,YAAIW,MAAJ,GAAa;AAAE,mBAAOd,OAAP;AAAiB;AAFhB,KAApB;AAIH,CAdD,EAcGD,qBAfQA,QAeR,GAAaA,WAAW,EAAxB,CAdH","file":"bundle.js","sourcesContent":["export var Renderer;\n(function (Renderer) {\n    let _canvas = document.getElementById(\"canvas\");\n    let _gl = _canvas.getContext(\"webgl2\", {\n        premultipliedAlpha: false\n    });\n    _canvas.width = window.innerWidth;\n    _canvas.height = window.innerHeight;\n    if (!_gl) {\n        alert(\"unable to initialise webgl\");\n    }\n    Renderer.instance = {\n        get gl() { return _gl; },\n        get canvas() { return _canvas; }\n    };\n})(Renderer || (Renderer = {}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}